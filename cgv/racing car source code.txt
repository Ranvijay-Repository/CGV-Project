#include<GL/glut.h>
#include<math.h>
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#define xjp 1
#define oini 250
#define incr 6.28/50
#define rad 5
//#define rp(x) ((x) >= 2 && (x) <= 2) 0 : ((x) > 2) 1 : -1

void display();
void redisplay(int, int);
void iFunc(int);
void ship2();
void street();
void kFunc(unsigned char, int, int);
void obj();
void obji();
void obs(float, float, float);
void side(float,float,float);
void carr();
//void dScore();
void es();
void eScr();
void kb2(char, int, int);
int rp(int);
void scDisp();
void kbt(char, int, int);
void kbi(char, int, int);
void iini();
void iScr();
void dini();
void hdisp();
void ttmr(int);
void rShpT(int, int);

int state = 0;
int ww, wh;
GLfloat xt, xi;
GLfloat yt, yi;
GLfloat crd[10][51][3];
GLfloat ang=70;
int score=0;
int sc = 0;
float ll=0, l=190, ls = 0.2, li = 0.2, cs = 0.2;
int xf;
int ap = 0, sf1=0, sf2=0;
int gMod=0;

GLfloat obj1l=oini, obj1x=5, o1p;
GLfloat obj2l = oini/2, obj2x=4;

int main(int ac, char **av)
{
		glutInit(&ac,av);
		glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH);
		glutInitWindowSize(700,500);
		glutInitWindowPosition(10,10);
		glutCreateWindow("Streets..");
//		glutDisplayFunc(display);

		ini();
//		glutReshapeFunc(redisplay);
//		glutKeyboardFunc(kFunc);
//		glutKeyboardFunc(kb2);
//		glutTimerFunc(30,iFunc,30);
//		glEnable(GL_DEPTH_TEST);
		glutMainLoop();
		return 0;
}

es()
{
		return;
		glutDisplayFunc(eScr);
		glutKeyboardFunc(kb2);
}

void eScr()
{
	glMatrixMode (GL_PROJECTION);
	glLoadIdentity ();
	gluOrtho2D(0,400,0,400);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	glClearColor(0,0,0,0);
	glClear(GL_COLOR_BUFFER_BIT);
	char st[20];
	strcpy(st,"Game Over");
	glColor3f(1,1,1);
	int i, l = strlen(st);
	int p = 50;
	for(i = 0; i < l; i++)
	{
			glRasterPos2i(p,100);
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,st[i]);
	}
	glFlush();
	glutSwapBuffers();
}
void kb2(char c, int x, int y)
{
		exit(0);
}
void iFunc(int dly)
{
	if(state != 1)
		return;
	ang+=0.5;
/*	if(xi != 0)
	{
		xt+=xi;
//		if(xt >= 5 || xt <= -5)
			xi=0;
	}
*/
//	if(xi != 0 && yi != 0)
//		xi*=1.5;
//		yi=2*yi/3;
/*
	if(xi < 0)
		if(xt >= -5)
		{
			xt+=xi;
			if(!yi)
			xi=0;
		}
	if(xi > 0)
		if(xt <= 5)
		{
			xt+=xi;
			if(!yi)
			xi=0;
		}
*/

/*	if(xi != 0)
	{
			if(xjp != 0)
			{
				if(xi > 0)
					if(xt <= 5)
						xt+=xi;
					else
						xi =-xi;
				else
					if(xt >= 0)
						xt += xi;
					else
						xi = 0;
			}
			else
			{
				if(xt <= 5 && xt >= -5)
				{
						xt+=xi;
						xi = 0;

				}
			}
	}
*/
		switch(xf)
		{
				case 1:
						if(xi > 0)
						{	if(xt <= 5)
								xt+=xi;
							else
							{
//								xi = -xi;
								xi = 0;
								xf = 0;
								obji();
							}
						}
						else
						{
								if(xt+xi >= 0.0)
									xt+=xi;
								else
								{
									xt = 0;
									xi = 0;
									xf = 0;
									obji();
								}
						}
						break;
				case -1:
						if(xi < 0)
						{
//							if(xt >= -5)
							if(xt >= -5)
								xt+=xi;
							else
							{
//								xi = -xi;
								xi = 0;
								xf = 0;
								obji();
							}
						}
						else
						{
								if(xt+xi <= 0)
									xt+=xi;
								else
								{
									xt = 0;
									xi = 0;
									xf = 0;
									obji();
								}
						}
						break;
				case 0:
						if((xt <= 5 && xi > 0) || (xt >= -5 && xi < 0))
						{
								xt+=xi;
								xi = 0;
						}
						break;
						if(xt <= 5 && xt >= -5)
						{
								xt+= xi;
								xi = 0;
						}
		}

	if(yi != 0)
	{
			if(yi >= 0)
			{
					if(yt <= 1.5)
						yt+=yi;
					else
						yi=-0.15;
			}
			else
			{
					if(yt > 0)
						yt += yi;
					else
						yi=0;
			}
	}
	if(ang == 360)
			ang=0;

	obj1l-=cs*8;
/*	if(obj1l <= 0)
	{
//		printf("\nScr incr : %d",score);
		score++;
//				obj1x=(rand()%57)*(rand()%2)?(-1):1;
		o1p = obj1x;
			switch(rand()%3)
			{
			case 0:
					obj1x = -5;
					break;
			case 1:
					obj1x = 0;
					break;
			default:
					obj1x = 5;
			}
			if(xt == 0)
				obj1x = 0;
			else if(xt > 0)
				obj1x = 5;
			else
				obj1x = -5;
			obj1l = oini;
			obj1l = -5;
//			sf1=0;
//			if(obj1l > 50)
//			sc++;
	}

	if(obj1l< 2)
		if((obj1x>0 && xt < 2) ||
			(obj1x == 0 && (xt >-2 || xt < 2))||
			(obj2x < 0 && xt < -2))
		{
			es();
		}
*/
	obj2l -= cs*8;
/*	if(obj2l < 0)
	{
//printf("\nScr incr : %d",score);

//			score++;
			switch((obj1x == 0)?0:(obj1x>0)?1:-1)
			{
				case 0:
						obj2x = (rand()%2==0)?-5:5;
						obj2x = (o1p>0)?-5:5;
						break;
				case 1:
					obj2x = (rand()%2==0)?-5:0;
					obj2x = (o1p<0)?0:-5;
					break;
				case -1:
					obj2x = (rand()%2==0)?5:0;
					obj2x = (o1p>0)?0:5;
					break;

			}
			obj2x = (xt==0)?0:(xt>0)?5:-5;
			obj2l = oini;
			obj2l = -5;
//			sf2=0;
//			if(obj2l > 50)
//			sc++;
	}
*/
	if(obj1l <= 0 || obj2l <= 0)
			obji();
		//		obj1x = (xt==0)?0:(xt>0)?5:-5;

if(ap)
{
	if((rp(obj1x) == rp(xt)) && (obj1l > 0 && obj1l < 150) && !sf1)
	{
		sf1++;
		printf("\nSwitching for obj1  l%f  x%f",obj1l,obj1x);

		switch(rp(obj1x))
		{
				case -1 :
							printf("-->> a");
							kFunc('a',0,0);
							break;
				case 1:
							printf("-->> d");
							kFunc('d',0,0);
							break;
				case 0:
							printf("-->> r");
							if(obj2l>5)
							{
									if(rp(obj2x)==1)
										kFunc('d',0,0);
									else
										kFunc('a',0,0);

							}
//							kFunc((rand()%2)?'a':'d',0,0);
							break;
		}
	}
	if((rp(obj2x) == rp(xt)) && (obj2l > 0 && obj2l < 150) && !sf2)
	{
			sf2++;
		printf("\nSwitching for obj2  l%f x%f ",obj2l,obj2x);
		switch(rp(obj2x))
		{
				case -1 :
							printf("-->> a");
							kFunc('a',0,0);
							break;
				case 1:
							printf("-->> d");
							kFunc('d',0,0);
							break;
				case 0:
							printf("-->> r");
							if(obj1l>5)
							{
									if(rp(obj1x)==1)
										kFunc('d',0,0);
									else
										kFunc('a',0,0);

							}
//							kFunc((rand()%2)?'a':'d',0,0);
							break;
		}
	}
}

	printf("\nsc%d",sc);


	if(!gMod)
	if( (obj1l <= 5 && obj1l > 0 && rp(obj1x) == rp(xt)) || (obj2l <= 5 && obj2l > 0 && rp(obj2x) == rp(xt)))
	{
			printf("\n crash detected");
			state = 2;
			kFunc(27,0,0);
//			glutDisplayFunc(scDisp);
//			glutKeyboardFunc(kbt);
			ini();
	}
	glutPostRedisplay();
	glutTimerFunc(dly,iFunc,dly);
}

int rp(int x)
{
	if(x < -2)
		return -1;
	if(x > 2)
		return 1;
	return 0;
//	int i = (x <= 2 && x >= -2)? 0 : (x > 2)? 1 : -1;
//	return i;
}

void kFunc(unsigned char ch, int x, int y)
{
//		printf("\n%c  %ud",ch,ch);
//		if(ch != 'x' || ch != ' ')
//			li = ls;
		switch(ch)
		{
				case 'a':
				case 'k':
						xi = 0.3*cs*2.5;
						if(xt < 0)
						{
							xf = -1;
//							xi = -xi;
						}
						else
							xf = 1;
//						printf("\na: xi :  %f  xt :  %f   %d",xi,xt,xf);
						fflush(stdout);
//						xf = 1;
						break;
				case 'A':
						xi=0.35;
						xf = 0;
						break;
				case 'd':
				case 'l':
						xi=-0.3*cs*2.5;

						if(xt <= 0)
						{
							xf = -1;
//							xi=-xi;
						}
						else
							xf = 1;
//						printf("\nb: xi :  %f  xt :  %f   %d",xi,xt,xf);
						fflush(stdout);

//						xf = -1;
						break;
				case 'D':
						xi = -0.35;
						xf = 0;
						break;

				case 'W':
				case 'w':
						obji();
						if(!yi)
						yi=0.15;
						break;
				case 's':
						yi=-0.15;
						break;
				case ' ':
//						ls = li;
//						printf("\nls :  %f",ls);
						if(li == 0)
						{
							li = ls;
							cs = ls;
						}
						else
						{
							ls = li;
							cs = 0;
							li = 0;
						}
//						ls = li;
						break;
				case 'x':
						li = ls;
						if(li < 1.5)
							li+=0.1;
						ls = li;
						break;
				case 'c':
//						ls = li;
						if(li < 2.5)
							li+=0.2;
						ls = li;
						cs = li;
						break;
				case 'z':
						li -= li*0.3;
						ls = li;
						cs = li;
						break;
				case 'q':
						if(ap)
							ap = 0;
						else
							ap = 1;
						break;

				case 'e':
						gMod = (gMod == 0)? 1:0;
						break;

				case 27:
						state = 2;
						iini();
						glutDisplayFunc(scDisp);
						glutKeyboardFunc(kbt);

						//	printf("\nScore ....  %d  <<---->>  %d",score,sc);
						//	exit(0);
		}
		if(obj1l <= 0 && rp(obj2x) != rp(xt))
		{
			obj1x = (xt==0)?0:(xt>0)?5:-5;
			obj1l = oini;
		}
		else if(obj2l <= 0 && rp(obj1x) == rp(xt))
		{
			obj2x = (xt==0)?0:(xt>0)?5:-5;
			obj2l = oini;
		}

}


void redisplay(int w, int h)
{
	glViewport (0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode (GL_PROJECTION);
	glLoadIdentity ();
//	gluPerspective(50, (GLfloat) w/(GLfloat) h, 0.01, 200.0);
	gluPerspective(30, (GLfloat) w/(GLfloat) h, 0.01, 200.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glClearColor(0,0,0,0);
//	gluLookAt(0,4.5+yi*0.5,-10,   0,4,5000,   0,1,0);
//	glShadeModel (GL_SMOOTH);
}


void display()
{
		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
		glLoadIdentity();
//		gluLookAt(0+xt/1.5,4.5+yt/1.5,-10,   0,4,5000,   0,1,0);
//		gluLookAt(0+xt/1.5,4.5+yt/1.5,-10,   0,4.5-yt/1.5,1000,   0-xt*0.01,1+yt*0.02,0);
//		gluLookAt(0+xt/1.5,2.5+yt/1.5,-6,   0,2.5-yt/1.5,1000,   0-xt*0.01,1+yt*0.02,0);
		gluLookAt(0+xt/1.5,2.5+yt/1.5,-9,   0,2.5-yt/1.5,1000,   0-xt*0.01*0,1+yt*0.02*0,0);

		street();

		obj();

/*		glPushMatrix();
		obs(1,0,0);
		glPopMatrix();
*/

		glPushMatrix();
		glTranslatef(0,-1,-1.0);
//		glTranslatef(0,1,-1.0);
		glTranslatef(xt,yt,0);
//		glRotatef(90,0,0,1);
		glRotatef(ang,0,1,0);
		glRotatef(ang,0,1,0);
		glScalef(0.3,0.4,0.3);
//		glScalef(0.4,0.6,0.4);
//		ship2();
//		carr();
		glPopMatrix();

		glPushMatrix();
		glTranslatef(0,0,3);
		glTranslatef(xt,yt,0);
		glRotatef(xt*0.5,1,0,0);
		glRotatef(-90,0,1,0);
		carr();
		glPopMatrix();
//		dScore();
		glutSwapBuffers();
}


void scDisp()
{
		glClearColor(0,0,0,0);
		glClear(GL_COLOR_BUFFER_BIT);

		char s[20];
		int i, l, x, y;

		y = 350;
		x = 100;
		strcpy(s,"Score :");
		l = strlen(s);
		glColor3f(1,1,1);
		for(i = 0; i < l; i++)
		{
				x+=10;
				glRasterPos2i(x,y);
				glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
		}



		int p=0, n=sc;
		glColor3f(1,1,1);
		glRasterPos2i(200,350);
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,(n/100)%10+48);
		glRasterPos2i(210,350);
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,((n/10)%10)+48);
		glRasterPos2i(220,350);
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,n%10+48);
		glutSwapBuffers();
}

void kbt(char c, int x, int y)
{
		printf("\nk press in kbt");
		state = 0;
		glutDisplayFunc(iScr);
		glutKeyboardFunc(kbi);
//		ini();
}

iini()
{
		glutReshapeFunc(rShpT);
		glutTimerFunc(90,ttmr,90);
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		gluOrtho2D(0,500,0,500);
		glMatrixMode(GL_MODELVIEW);
		glLoadIdentity();
		glClearColor(0,0,0,0);
//		glutPostRedisplay();
}

void rShpT(int w, int h)
{
		ww = w;
		wh = h;
}

void ttmr(int i)
{
		glutTimerFunc(90,ttmr,90);
		glutPostRedisplay();
}

void dini()
{
		redisplay(ww,wh);
		glutDisplayFunc(display);
		glutKeyboardFunc(kFunc);
		glutReshapeFunc(redisplay);
		glutTimerFunc(30,iFunc,30);
		glEnable(GL_DEPTH);
}

void ini()
{

/*		if(state == 0)
		{
		}
		else if(state == 1)
		{
				dini();
		}
*/
		switch(state)
		{
				case 0:
						glutDisplayFunc(iScr);
						glutKeyboardFunc(kbi);
						iini();
						break;
				case 1:
						dini();
						break;
				case 2:
						glutDisplayFunc(scDisp);
						glutKeyboardFunc(kbt);
						iini();
						break;
				case 3:
						glutDisplayFunc(hdisp);
						glutKeyboardFunc(kbt);
						iini();
						break;

		}
}

void iScr()
{
		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
		char s[20];
		int i, l, x, y;

		y = 350;
		x = 200;
		strcpy(s,"ew Game");
		l = strlen(s);
		glColor3f(1,0,0);
		glRasterPos2i(x,y);
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,'N');
		glColor3f(1,1,1);
		for(i = 0; i < l; i++)
		{
				x+=10;
				glRasterPos2i(x,y);
				glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
		}

		y = 300;
		x = 200;
		strcpy(s,"elp");
		l = strlen(s);
		glColor3f(1,0,0);
		glRasterPos2i(x,y);
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,'H');
		glColor3f(1,1,1);
		for(i = 0; i < l; i++)
		{
				x+=10;
				glRasterPos2i(x,y);
				glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
		}

		y = 250;
		x = 200;
		strcpy(s,"uit");
		l = strlen(s);
		glColor3f(1,0,0);
		glRasterPos2i(x,y);
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,'Q');
		glColor3f(1,1,1);
		for(i = 0; i < l; i++)
		{
				x+=10;
				glRasterPos2i(x,y);
				glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
		}

		glutSwapBuffers();
}

void kbi(char c, int x, int y)
{
		switch(c)
		{
				case 'n':
				case 'N':
							state=1;
							sc = 0;
							ll=0;
							l=190;
							ls = 0.2;
							li = 0.2;
							cs = 0.2;
							obj1l = oini/2;
							obj2l = -6;
							dini();
							break;
				case 'h':
				case 'H':
							state=3;
							glutDisplayFunc(hdisp);
							glutKeyboardFunc(kbt);
							iini();
							break;
				case 'q':
				case 'Q':
				case 27:
							exit(0);
		}
}

/*
void kbt()
{
		iini();
		glutPostRedisplay();
}
*/
void hdisp()
{
	glClearColor(0,0,0,0);
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	char s[20];
	int i, l, x, y;

	y = 350;
	x = 50;
	strcpy(s,"a - LEFT");
	glColor3f(1,1,1);
	l = strlen(s);
	for(i = 0; i < l; i++)
	{
			x+=10;
			glRasterPos2i(x,y);
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
	}

	y = 320;
	x = 50;
	strcpy(s,"d - RIGHT");
	glColor3f(1,1,1);
	l = strlen(s);
	for(i = 0; i < l; i++)
	{
			x+=10;
			glRasterPos2i(x,y);
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
	}

	y = 290;
	x = 50;
	strcpy(s,"z - Decrease Speed");
	glColor3f(1,1,1);
	l = strlen(s);
	for(i = 0; i < l; i++)
	{
			x+=10;
			glRasterPos2i(x,y);
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
	}

	y = 260;
	x = 50;
	strcpy(s,"c - Increase Speed");
	glColor3f(1,1,1);
	l = strlen(s);
	for(i = 0; i < l; i++)
	{
			x+=10;
			glRasterPos2i(x,y);
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
	}

	y = 230;
	x = 50;
	strcpy(s,"<SPACE> - Pause");
	glColor3f(1,1,1);
	l = strlen(s);
	for(i = 0; i < l; i++)
	{
			x+=10;
			glRasterPos2i(x,y);
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
	}

	y = 200;
	x = 50;
	strcpy(s,"<Esc> - Main Screen / End Game");
	glColor3f(1,1,1);
	l = strlen(s);
	for(i = 0; i < l; i++)
	{
			x+=10;
			glRasterPos2i(x,y);
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
	}

	y = 150;
	x = 100;
	strcpy(s,"Press Any Key");
	glColor3f(1,1,1);
	l = strlen(s);
	for(i = 0; i < l; i++)
	{
			x+=10;
			glRasterPos2i(x,y);
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
	}

	glFlush();
	glutSwapBuffers();
	usleep(100000);
	scanf("%d",i);
}

void obj()
{
		glPushMatrix();
		glColor3f(1,1,1);
		glTranslatef(obj1x,0,obj1l);
//		glutWireCube(2);
		glRotatef(90,0,1,0);
		carr();
		glPopMatrix();
//		if(ll<=0)
//			obj1l--;

		glPushMatrix();
		glColor3f(1,1,0);
		glTranslatef(obj2x,0,obj2l);
//		glutWireCube(2);
		glRotatef(90,0,1,0);
		carr();


		glPopMatrix();
}
void street()
{
		float i, j, d, w=4.0, h=2.0, x1, z1, x2, z2;
//		static float ll=0, l=70;
		float xx, yy, zz;

		float c[2][3];

//		while(1)
		{
//				glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
				for(i = -1; i < l; i++)
				{
					d = ((int)i%2)?-w/4:w/4;
					if((int)i%3==5)
					{
						glColor3f(rand()%2,rand()%2,rand()%2);
						glPointSize(2);
					glBegin(GL_POINTS);
					for(j=3.14+1.56; j <= 6.28+1.56; j+=0.01)
					{
							xx=sin(j)*8;
							yy=cos(j)*3;
//							glColor3f(rand()%2,rand()%2,rand()%2);
							glVertex3f(xx,yy,i*h+ll);
					}
					glEnd();
					}
//					if(0)
					for(j = 1; j < 6; j++)
					{
//							if(d < 0)
//									continue;
							x1 = (w)*(j-1)-w*2;
							x2 = (w)*j-w*2;
							z1= (h)*(i-1)+ll;
							z2=i*h+ll;
							xx = (x1+x2)/2+d;
							zz=(z1+z2)/2+ll;

//							printf("\n%f  %f ",xx,zz);
//							glColor3f(rand()%2,rand()%2,rand()%2);
							glColor3f(1,0,0);
							glLineWidth(1.5);
/*							glBegin(GL_LINES);

								glColor3f(rand()%2,rand()%2,rand()%2);
								glVertex3f(x1+d,0,z1);
								glColor3f(rand()%2,rand()%2,rand()%2);
								glVertex3f(x1+d,0,z2);



//								glVertex3f(x2+d,0,z2);
//								glVertex3f(x2+d,0,z1);
							glEnd();
*/

							c[0][0] = rand()%2;
							c[0][1] = rand()%2;
							c[0][2] = rand()%2;

							c[1][0] = rand()%2;
							c[1][1] = rand()%2;
							c[1][2] = rand()%2;
/*
							c[0][0] = 0;
							c[0][1] = 1;
							c[0][2] = 0;

							c[1][0] = 1;
							c[1][1] = 0;
							c[1][2] = 0;
*/
							z1-=0;
							z2+=0;
							glBegin(GL_LINES);
							glColor3fv(c[0]);
//							glVertex3f(x1+d,0,(z1+z2)/2-2);
//							glColor3f(0,0,0);
							glVertex3f(x1+d,0,z1);

							glColor3fv(c[0]);
//							glVertex3f(x1+d,0,(z1+z2)/2+2);
	//						glColor3f(0,0,0);
							glVertex3f(x1+d,0,z2);
							glEnd();
						float wd = 0.05;
/*						glBegin(GL_TRIANGLES);
							glColor3fv(c[0]);

							glVertex3f(x1+d,0,z1);
							glColor3f(0,0,0);
							glVertex3f(x1+d-wd,0,z1-wd);
							glVertex3f(x1+d+wd,0,z1-wd);
						glEnd();

						glBegin(GL_TRIANGLES);
							glColor3fv(c[1]);
							glVertex3f(x1+d,0,z2);
							glColor3f(0,0,0);
							glVertex3f(x1+d-wd,0,z2+wd);
							glVertex3f(x1+d+wd,0,z2+wd);
						glEnd();

						glBegin(GL_QUADS);
							glColor3fv(c[0]);
							glVertex3f(x1+d,0,z1);
							glColor3fv(c[1]);
							glVertex3f(x1+d,0,z2);
							glColor3f(0,0,0);
							glVertex3f(x1+d-wd,0,z2+d);
							glVertex3f(x1+d-wd,0,z1-d);
						glEnd();

						glBegin(GL_QUADS);
							glColor3fv(c[0]);
							glVertex3f(x1+d,0,z1);
							glColor3fv(c[1]);
							glVertex3f(x1+d,0,z2);
							glColor3f(0,0,0);
							glVertex3f(x1+d+wd,0,z2+d);
							glVertex3f(x1+d+wd,0,z1-d);
						glEnd();
*/
	//						if(i != 3)
		//						continue;


	/*					glBegin(GL_QUADS);
							glColor3f(0,0,0);
//							glVertex3f(xx+d,0,zz);
//							glVertex3f()
							glColor3f(1,1,1);
							glVertex3f(x1+d,0,z1);
							glVertex3f(x1+d,0,z2);


							glColor3f(0,0,0);
							glVertex3f(xx,0,zz);
							glColor3f(1,1,1);
							glVertex3f(x2+d,0,z2);
							glVertex3f(x2+d,0,z1);

							glColor3f(0,0,0);
							glVertex3f(xx,0,zz);
							glColor3f(1,1,1);
							glVertex3f(x2+d,0,z1);
							glVertex3f(x1+d,0,z1);

							glColor3f(0,0,0);
							glVertex3f(xx,0,zz);
							glColor3f(1,1,1);
							glVertex3f(x2+d,0,z2);
							glVertex3f(x1+d,0,z2);

						glEnd();
*/


					}
				}
//				glEnd();
				glColor3f(rand()%2,rand()%2,rand()%2);

//				float d = 1;
				d = 0.3;
/*
				c[0][0] = rand()%2;
				c[0][1] = rand()%2;
				c[0][2] = rand()%2;

				c[1][0] = rand()%2;
				c[1][1] = rand()%2;
				c[1][2] = rand()%2;
*/

				c[0][0] = 0.5;
				c[0][1] = 0.5;
				c[0][2] = 1;

				c[1][0] = 0.5;
				c[1][1] = 0.5;
				c[1][2] = 1;

/*				glBegin(GL_LINES);
				glColor3f(rand()%2,rand()%2,rand()%2);
					glVertex3f(w*2.25,0,0);
					glColor3f(rand()%2,rand()%2,rand()%2);
					glVertex3f(w*2.25,0,h*l);
					glColor3f(rand()%2,rand()%2,rand()%2);
					glVertex3f(-w*2.25,0,0);
					glColor3f(rand()%2,rand()%2,rand()%2);
					glVertex3f(-w*2.25,0,h*l);
				glEnd();
*/

				glBegin(GL_TRIANGLES);
					glColor3fv(c[0]);
					glVertex3f(w*2.25,0,0);
					glColor3f(0,0,0);
					glVertex3f(w*2.5-d,0,0-d);
					glVertex3f(w*2.5+d,0,0-d);
				glEnd();

				glBegin(GL_TRIANGLES);
					glColor3fv(c[1]);
					glVertex3f(w*2.25,0,h*l);
					glColor3f(0,0,0);
					glVertex3f(w*2.25-d,0,h*l+d);
					glVertex3f(w*2.25+d,0,h*l+d);
				glEnd();

				glBegin(GL_QUADS);
					glColor3fv(c[0]);
					glVertex3f(w*2.25,0,0);
					glColor3fv(c[1]);
					glVertex3f(w*2.25,0,h*l);
					glColor3f(0,0,0);
					glVertex3f(w*2.25-d,0,h*l+d);
					glVertex3f(w*2.25-d,0,0-d);
				glEnd();

				glBegin(GL_QUADS);
					glColor3fv(c[0]);
					glVertex3f(w*2.25,0,0);
					glColor3fv(c[1]);
					glVertex3f(w*2.25,0,h*l);
					glColor3f(0,0,0);
					glVertex3f(w*2.25+d,0,h*l+d);
					glVertex3f(w*2.25+d,0,0-d);
				glEnd();


// --------------------------------------------------------------------------------------------//

				glBegin(GL_TRIANGLES);
					glColor3fv(c[0]);
					glVertex3f(-w*2.25,0,0);
					glColor3f(0,0,0);
					glVertex3f(-w*2.5-d,0,0-d);
					glVertex3f(-w*2.5+d,0,0-d);
				glEnd();

				glBegin(GL_TRIANGLES);
					glColor3fv(c[1]);
					glVertex3f(-w*2.25,0,h*l);
					glColor3f(0,0,0);
					glVertex3f(-w*2.25-d,0,h*l+d);
					glVertex3f(-w*2.25+d,0,h*l+d);
				glEnd();

				glBegin(GL_QUADS);
					glColor3fv(c[0]);
					glVertex3f(-w*2.25,0,0);
					glColor3fv(c[1]);
					glVertex3f(-w*2.25,0,h*l);
					glColor3f(0,0,0);
					glVertex3f(-w*2.25-d,0,h*l+d);
					glVertex3f(-w*2.25-d,0,0-d);
				glEnd();

				glBegin(GL_QUADS);
					glColor3fv(c[0]);
					glVertex3f(-w*2.25,0,0);
					glColor3fv(c[1]);
					glVertex3f(-w*2.25,0,h*l);
					glColor3f(0,0,0);
					glVertex3f(-w*2.25+d,0,h*l+d);
					glVertex3f(-w*2.25+d,0,0-d);
				glEnd();

//			glutSwapBuffers();
//			usleep(50000);
			ll-=li;
			if(ll <= 0) ll=h*2;
			li = cs;
		}
}



















void ship2()
{
	float r,h,x,y,z,x1,y1,z1,i,j;
	int xo=0, xo2,a,b;
	float col[2][3] = { {0.2,0.2,1} /*{rand()%2,rand()%2+1,rand()%2+1}*/, {0}};
	for(i = 1; i <= 1.57; i+=(3.14/50.0),xo++)
	{
		h = sin(i)*rad;
		r = cos(i)*rad;
		y1=h;
		for(j = incr,xo2=0; j<= 6.28+incr; j+=incr,xo2++)
		{
				x = sin(j)*r;
				z = cos(j)*r;
				x1=x;
				z1=z;
				crd[xo][xo2][0] = x1;
				crd[xo][xo2][1] = y1;
				crd[xo][xo2][2] = z1;

///				printf("\n %f %f --->>  %f  %f  %f",i,j,x1, y1, z1);
		}
	}
	{
//int i, j;

		for(a = 1; a < 10; a++)
			for(b = 1; b < 51; b++)
			{
				i = 0.992;
				glPushMatrix();
				glRotatef(100,0,1,0);
//					if(a != 2 || b%2 )
					{
						glColor3fv(col[0]);
						glBegin(GL_POLYGON);
//						glVertex3fv(crd[a][b]);
						glVertex3f(crd[a][b][0]*i,crd[a][b][1]*i,crd[a][b][2]*i);
//						glVertex3fv(crd[a][b-1]);
						glVertex3f(crd[a][b-1][0]*i,crd[a][b-1][1]*i,crd[a][b-1][2]*i);
//						glVertex3fv(crd[a-1][b-1]);
						glVertex3f(crd[a-1][b-1][0]*i,crd[a-1][b-1][1]*i,crd[a-1][b-1][2]*i);
//						glVertex3fv(crd[a-1][b]);
						glVertex3f(crd[a-1][b][0]*i,crd[a-1][b][1]*i,crd[a-1][b][2]*i);

						glEnd();
					}

			}
		glPopMatrix();
		for(a = 1; a < 10; a++)
			for(b = 1; b < 51; b++)
			{
					if(a != 2 || b%2 )
					{
						glColor3fv(col[0]);
						glBegin(GL_POLYGON);
						glVertex3fv(crd[a][b]);
						glVertex3fv(crd[a][b-1]);
						glVertex3fv(crd[a-1][b-1]);
						glVertex3fv(crd[a-1][b]);
						glEnd();
					}
					else
					{
						col[1][0] = rand()%2;
						col[1][1] = rand()%2;
						col[1][2] = rand()%2;
						i = 1+(3.14/50)*3.5;
						j = incr*(b-0.5);

						y = sin(i)*rad;
						r = cos(i)*rad;
						x = sin(j)*r;
						z = cos(j)*r;


						x = (crd[a][b][0]+crd[a][b-1][0] + crd[a-1][b][0]+crd[a-1][b-1][0])/4;
						y = (crd[a][b][1]+crd[a-1][b][1])/2;
						z = (crd[a][b][2]+crd[a-1][b][2])/2;

						glBegin(GL_TRIANGLES);


						glColor3fv(col[0]);
						glVertex3fv(crd[a][b-1]);
						glVertex3fv(crd[a][b]);
						glColor3fv(col[1]);
						glVertex3f(x,y,z);

						glColor3fv(col[0]);
						glVertex3fv(crd[a][b]);
						glVertex3fv(crd[a-1][b]);
						glColor3fv(col[1]);
						glVertex3f(x,y,z);

						glColor3fv(col[0]);
						glVertex3fv(crd[a-1][b]);
						glVertex3fv(crd[a-1][b-1]);
						glColor3fv(col[1]);
						glVertex3f(x,y,z);

						glColor3fv(col[0]);
						glVertex3fv(crd[a][b-1]);
						glVertex3fv(crd[a-1][b-1]);
						glColor3fv(col[1]);
						glVertex3f(x,y,z);

						glEnd();

					}
			}
	}

}


void obs(float r, float g, float b)
{
		side(r,1,b);
		glPushMatrix();
		glRotatef(90,1,0,0);
//		glTranslatef()
		side(r,g,b);
		glPopMatrix();

		glPushMatrix();
		glRotatef(90,1,0,0);
		glTranslatef(0,0,-1);
		side(r,g,b);
		glPopMatrix();

		glPushMatrix();
//		glRotatef(90,1,0,0);
		glTranslatef(0,0,1);
		side(r,g,b);
		glPopMatrix();

		glPushMatrix();
		glRotatef(90,0,1,0);
		glTranslatef(-1,0,0);
		side(r,g,b);
		glPopMatrix();

		glPushMatrix();
		glRotatef(90,0,1,0);
		glTranslatef(-1,0,1);
		side(r,g,b);
		glPopMatrix();

}


void side(float r, float g, float b)
{
		float d = 0.2;

		glColor3f(0,0,0);
		glBegin(GL_QUADS);
			glVertex3f(0,0,0);
			glVertex3f(1,0,0);
			glVertex3f(1,1,0);
			glVertex3f(0,1,0);
		glEnd();

		glBegin(GL_QUADS);
			glColor3f(r,g,b);
			glVertex3f(0,0,0);
			glVertex3f(1,0,0);
			glColor3f(0,0,0);
			glVertex3f(1-d,0+d,0);
			glVertex3f(0+d,0+d,0);
		glEnd();

		glBegin(GL_QUADS);
			glVertex3f(0,0,0);
			glColor3f(r,g,b);
			glVertex3f(0,1,0);
			glColor3f(0,0,0);
			glVertex3f(0+d,1-d,0);
			glVertex3f(0+d,0+d,0);
		glEnd();

		glBegin(GL_QUADS);
			glVertex3f(1,1,0);
			glColor3f(r,g,b);
			glVertex3f(0,1,0);
			glColor3f(0,0,0);
			glVertex3f(0+d,1-d,0);
			glVertex3f(1-d,1-d,0);
		glEnd();

		glBegin(GL_QUADS);
			glColor3f(r,g,b);
			glVertex3f(1,1,0);
			glVertex3f(1,0,0);
			glColor3f(0,0,0);
			glVertex3f(1-d,0+d,0);
			glVertex3f(1-d,1-d,0);
		glEnd();

//			glVertex3f()
//			glVertex3f()
}

void obji()
{
			if(obj1l <= 0 && rp(obj2x) != rp(xt))
			{
				obj1x = (xt==0)?0:(xt>0)?5:-5;
				obj1l = oini;
				sc++;
				sf1=0;
			}
			else if(obj2l <= 0 && rp(obj1x) != rp(xt))
			{
				obj2x = (xt==0)?0:(xt>0)?5:-5;
				obj2l = oini;
				sc++;
				sf2=0;
			}

}

void carr()
{

glTranslatef(.0,0.8,0.0);
glEnable(GL_BLEND);//TRANCPARENCY1
	 glBlendFunc(GL_ONE, GL_ZERO);//TRANCPARENCY2
   //glColor3f(1.0,1.0,1.0);
  // glBegin(
   //glVertex3f(

glBegin(GL_LINE_LOOP);
	glVertex3f(-1.12,-.48,0.7);//a
	glVertex3f(-0.86,-.48,0.7);//b
	glVertex3f(-.74,-0.2,0.7);//c
	glVertex3f(-.42,-.2,0.7);//d
	glVertex3f(-0.3,-.48,0.7);//e
	glVertex3f(.81,-0.48,0.7);//f
	glVertex3f(.94,-0.2,0.7);//g
	glVertex3f(1.24,-.2,0.7);//h
	glVertex3f(1.38,-.48,0.7);//i
	glVertex3f(1.52,-.44,0.7);//j
	glVertex3f(1.52,.14,0.7);//k
	glVertex3f(1.14,0.22,0.7);//l
	glVertex3f(0.76,.22,0.7);//m
	glVertex3f(.52,0.56,0.7);//n
	glVertex3f(-0.1,0.6,0.7);//0
	glVertex3f(-1.02,0.6,0.7);//p
	glVertex3f(-1.2,0.22,0.7);//q
	glVertex3f(-1.2,-.28,0.7);//r
 glEnd();

glBegin(GL_LINE_LOOP);
	glVertex3f(-1.12,-.48,-0.7);//a'
	glVertex3f(-0.86,-.48,-0.7);//b'
	glVertex3f(-.74,-0.2,-0.7);//c'
	glVertex3f(-.42,-.2,-0.7);//d'
	glVertex3f(-0.3,-.48,-0.7);//e'
	glVertex3f(.81,-0.48,-0.7);//f'
	glVertex3f(.94,-0.2,-0.7);//g'
	glVertex3f(1.24,-.2,-0.7);//h'
	glVertex3f(1.38,-.48,-0.7);//i'
	glVertex3f(1.52,-.44,-0.7);//j'
	glVertex3f(1.52,.14,-0.7);//k'
	glVertex3f(1.14,0.22,-0.7);//l'
	glVertex3f(0.76,.22,-0.7);//m'
	glVertex3f(.52,0.56,-0.7);//n'
	glVertex3f(-0.1,0.6,-0.7);//o'
	glVertex3f(-1.02,0.6,-0.7);//p'
	glVertex3f(-1.2,0.22,-0.7);//q'
	glVertex3f(-1.2,-.28,-0.7);//r'
 glEnd();

glBegin(GL_LINES);
	glVertex3f(-1.12,-.48,0.7);//a
	glVertex3f(-1.12,-.48,-0.7);//a'
	glVertex3f(-0.86,-.48,0.7);//b
	glVertex3f(-0.86,-.48,-0.7);//b'
	glVertex3f(-.74,-0.2,0.7);//c
	glVertex3f(-.74,-0.2,-0.7);//c'
	glVertex3f(-.42,-.2,0.7);//d
	glVertex3f(-.42,-.2,-0.7);//d'
	glVertex3f(-0.3,-.48,0.7);//e
	glVertex3f(-0.3,-.48,-0.7);//e'
	glVertex3f(.81,-0.48,0.7);//f
	glVertex3f(.81,-0.48,-0.7);//f'
	glVertex3f(.94,-0.2,0.7);//g
	glVertex3f(.94,-0.2,-0.7);//g'
	glVertex3f(1.24,-.2,0.7);//h
	glVertex3f(1.24,-.2,-0.7);//h'
	glVertex3f(1.38,-.48,0.7);//i
	glVertex3f(1.38,-.48,-0.7);//i'
	glVertex3f(1.52,-.44,0.7);//j
	glVertex3f(1.52,-.44,-0.7);//j'
	glVertex3f(1.52,.14,0.7);//k
	glVertex3f(1.52,.14,-0.7);//k'
	glVertex3f(1.14,0.22,0.7);//l
	glVertex3f(1.14,0.22,-0.7);//l'
	glVertex3f(0.76,.22,0.7);//m
	glVertex3f(0.76,.22,-0.7);//m'
	glVertex3f(.52,0.56,0.7);//n
	glVertex3f(.52,0.56,-0.7);//n'
	glVertex3f(-0.1,0.6,0.7);//0
	glVertex3f(-0.1,0.6,-0.7);//o'
	glVertex3f(-1.02,0.6,0.7);//p
	glVertex3f(-1.02,0.6,-0.7);//p'
	glVertex3f(-1.2,0.22,0.7);//q
	glVertex3f(-1.2,0.22,-0.7);//q'
	glVertex3f(-1.2,-.28,0.7);//r
	glVertex3f(-1.2,-.28,-0.7);//r'
glEnd();


// top filling
glBegin(GL_POLYGON);
	glVertex3f(-0.1,0.6,0.7);//o
	glVertex3f(-0.1,0.6,-0.7);//o'
	glVertex3f(-1.02,0.6,-0.7);//p'
	glVertex3f(-1.02,0.6,0.7);//p
glEnd();


glBegin(GL_POLYGON);
	glVertex3f(-0.1,0.6,0.7);//o
	glVertex3f(-0.1,0.6,-0.7);//o'
	glVertex3f(.52,0.56,-0.7);//n'
	glVertex3f(.52,0.56,0.7);//n
glEnd();

//back filling
glBegin(GL_POLYGON);
	glVertex3f(-1.2,0.22,0.7);//q
	glVertex3f(-1.2,0.22,-0.7);//q'
	glVertex3f(-1.2,-.28,-0.7);//r'
	glVertex3f(-1.2,-.28,0.7);//r
glEnd();






glBegin(GL_POLYGON);
	glVertex3f(1.52,.14,0.7);//k
	glVertex3f(1.14,0.22,0.7);//l
	glVertex3f(1.14,0.22,-0.7);//l'
	glVertex3f(1.52,.14,-0.7);//k'
glEnd();

glBegin(GL_POLYGON);
	glVertex3f(0.76,.22,0.7);//m
	glVertex3f(0.76,.22,-0.7);//m'
	glVertex3f(1.14,0.22,-0.7);//l'
	glVertex3f(1.14,0.22,0.7);//l
glEnd();

glBegin(GL_POLYGON);
	glVertex3f(-1.12,-.48,0.7);//a
	glVertex3f(-0.86,-.48,0.7);//b
	glVertex3f(-.74,-0.2,0.7);//c
	glVertex3f(-0.64,0.22,0.7);//cc
	glVertex3f(-1.08,0.22,0.7);//dd
	glVertex3f(-1.2,0.22,0.7);//q
	glVertex3f(-1.2,-.28,0.7);//r
glEnd();

glBegin(GL_POLYGON);
glVertex3f(-.74,-0.2,0.7);//c
glVertex3f(-0.64,0.22,0.7);//cc
glVertex3f(-0.5,0.22,0.7);//hh
glVertex3f(-0.5,-0.2,0.7);//pp
glEnd();
glBegin(GL_POLYGON);
glVertex3f(0.0,0.22,0.7);//gg
glVertex3f(1.14,0.22,0.7);//l
glVertex3f(1.24,-.2,0.7);//h
glVertex3f(0.0,-0.2,0.7);//oo



glEnd();
//
glBegin(GL_POLYGON);

	glVertex3f(-1.12,-.48,-0.7);//a'
	glVertex3f(-0.86,-.48,-0.7);//b'
	glVertex3f(-.74,-0.2,-0.7);//c'
	glVertex3f(-0.64,0.22,-0.7);//cc'
	glVertex3f(-1.08,0.22,-0.7);//dd'
	glVertex3f(-1.2,0.22,-0.7);//q'
	glVertex3f(-1.2,-.28,-0.7);//r'
glEnd();

glBegin(GL_POLYGON);

glVertex3f(-.74,-0.2,-0.7);//c'
glVertex3f(-0.64,0.22,-0.7);//cc'
glVertex3f(-0.5,0.22,-0.7);//hh'
glVertex3f(-0.5,-0.2,-0.7);//pp'

glEnd();
glBegin(GL_POLYGON);
glVertex3f(0.0,0.22,-0.7);//gg'
glVertex3f(1.14,0.22,-0.7);//l'
glVertex3f(1.24,-.2,-0.7);//h'
glVertex3f(0.0,-0.2,-0.7);//oo'

glEnd();


glBegin(GL_POLYGON);
glVertex3f(-1.2,0.22,0.7);//q
glVertex3f(-1.08,0.22,0.7);//dd
glVertex3f(-0.98,0.5,0.7);//aa
glVertex3f(-1.02,0.6,0.7);//p
glEnd();


glBegin(GL_POLYGON);
glVertex3f(-1.02,0.6,0.7);//p
glVertex3f(-0.98,0.5,0.7);//aa
glVertex3f(0.44,0.5,0.7);//jj
glVertex3f(.52,0.56,0.7);//n
glVertex3f(-0.1,0.6,0.7);//0
glEnd();

glBegin(GL_POLYGON);
glVertex3f(-0.64,0.5,0.7);//bb
glVertex3f(-0.64,0.22,0.7);//cc
glVertex3f(-0.5,0.22,0.7);//hh
glVertex3f(-0.5,0.5,0.7);//ee
glEnd();

glBegin(GL_POLYGON);
glVertex3f(0.0,0.5,0.7);//ff
glVertex3f(0.0,0.22,0.7);//gg
glVertex3f(0.12,0.22,0.7);//ll
glVertex3f(0.12,0.5,0.7);//ii
glEnd();

glBegin(GL_POLYGON);
glVertex3f(.52,0.56,0.7);//n
glVertex3f(0.44,0.5,0.7);//jj
glVertex3f(0.62,0.22,0.7);//kk
glVertex3f(0.76,.22,0.7);//m
glEnd();

glBegin(GL_POLYGON);
glVertex3f(-.42,-.2,0.7);//d
glVertex3f(.94,-0.2,0.7);//g
glVertex3f(.81,-0.48,0.7);//f
glVertex3f(-0.3,-.48,0.7);//e
glEnd();

glBegin(GL_POLYGON);
glVertex3f(1.14,0.22,0.7);//l
glVertex3f(1.52,.14,0.7);//k
glVertex3f(1.52,-.44,0.7);//j
glVertex3f(1.38,-.48,0.7);//i
glVertex3f(1.24,-.2,0.7);//h
glEnd();

glBegin(GL_POLYGON);
glVertex3f(-1.2,0.22,-0.7);//q'
glVertex3f(-1.08,0.22,-0.7);//dd'
glVertex3f(-0.98,0.5,-0.7);//aa'
glVertex3f(-1.02,0.6,-0.7);//p'
glEnd();

glBegin(GL_POLYGON);
glVertex3f(-1.02,0.6,-0.7);//p'
glVertex3f(-0.98,0.5,-0.7);//aa'
glVertex3f(0.44,0.5,-0.7);//jj'
glVertex3f(.52,0.56,-0.7);//n'
glVertex3f(-0.1,0.6,-0.7);//0'
glEnd();

glBegin(GL_POLYGON);
glVertex3f(-0.64,0.5,-0.7);//bb'
glVertex3f(-0.64,0.22,-0.7);//cc'
glVertex3f(-0.5,0.22,-0.7);//hh'
glVertex3f(-0.5,0.5,-0.7);//ee'
glEnd();

glBegin(GL_POLYGON);
glVertex3f(0.0,0.5,-0.7);//ff'
glVertex3f(0.0,0.22,-0.7);//gg'
glVertex3f(0.12,0.22,-0.7);//ll'
glVertex3f(0.12,0.5,-0.7);//ii'
glEnd();

glBegin(GL_POLYGON);
glVertex3f(.52,0.56,-0.7);//n'
glVertex3f(0.44,0.5,-0.7);//jj'
glVertex3f(0.62,0.22,-0.7);//kk'
glVertex3f(0.76,.22,-0.7);//m'
glEnd();

glBegin(GL_POLYGON);
glVertex3f(-.42,-.2,-0.7);//d'
glVertex3f(.94,-0.2,-0.7);//g'
glVertex3f(.81,-0.48,-0.7);//f'
glVertex3f(-0.3,-.48,-0.7);//e'
glEnd();

glBegin(GL_POLYGON);
glVertex3f(1.14,0.22,-0.7);//l'
glVertex3f(1.52,.14,-0.7);//k'
glVertex3f(1.52,-.44,-0.7);//j'
glVertex3f(1.38,-.48,-0.7);//i'
glVertex3f(1.24,-.2,-0.7);//h'
glEnd();


// door1 body- rear, near
glBegin(GL_POLYGON);
glVertex3f(-0.5,0.22,0.7);//hh
glVertex3f(0.0,0.22,0.7);//gg
glVertex3f(0.0,-0.2,0.7);//oo
glVertex3f(-0.5,-0.2,0.7);//pp
glEnd();

// door body- rear, far
glBegin(GL_POLYGON);
glVertex3f(-0.5,0.22,-0.7);//hh'
glVertex3f(0.0,0.22,-0.7);//gg'
glVertex3f(0.0,-0.2,-0.7);//oo'
glVertex3f(-0.5,-0.2,-0.7);//pp'
glEnd();

// door2  body- near, driver

glBegin(GL_POLYGON);
glVertex3f(0.12,0.22,0.7);//ll
glVertex3f(0.62,0.22,0.7);//kk
glVertex3f(0.62,-0.2,0.7);//mm
glVertex3f(0.12,-0.2,0.7);//nn
glEnd();



// door2  body- far, driver

glBegin(GL_POLYGON);
 glVertex3f(0.12,0.22,-0.7);//ll'
glVertex3f(0.62,0.22,-0.7);//kk'
glVertex3f(0.62,-0.2,-0.7);//mm'
glVertex3f(0.12,-0.2,-0.7);//nn'
glEnd();

glBegin(GL_POLYGON);//front**
	glVertex3f(1.52,.14,0.7);//k
	glVertex3f(1.52,.14,-0.7);//k'
	glVertex3f(1.52,-.44,-0.7);//j'
	glVertex3f(1.52,-.44,0.7);//j
glEnd();

glTranslatef(-.58,-.52,0.7);//translate to 1st tyre
glColor3f(0.09,0.09,0.09);// tyre color********
glutSolidTorus(0.12f, .14f, 10, 25);
glTranslatef(1.68,0.0,0.0);//translate to 2nd tyre
glutSolidTorus(0.12f, .14f, 10, 25);

glTranslatef(0.0,0.0,-1.4);//translate to 3rd tyre
glutSolidTorus(0.12f, .14f, 10, 25);
glTranslatef(-1.68,0.0,0.0);//translate to 4th tyre which is behind 1st tyre i.e rear .back
glutSolidTorus(0.12f, .14f, 10, 25);
glTranslatef(.58,.52,0.7);//translate to origin
glRotatef(90.0,0.0,1.0,0.0);
glTranslatef(0.0,0.0,-1.40);

glutSolidTorus(0.2f, .2f, 10, 25);

glTranslatef(0.0,0.0,1.40);
glRotatef(270.0,0.0,1.0,0.0);


//bottom filling
glBegin(GL_POLYGON);
glColor3f(0.25,0.25,0.25);
	glVertex3f(-0.3,-.48,0.7);//e
	glVertex3f(-0.3,-.48,-0.7);//e'
	glVertex3f(.81,-0.48,-0.7);//f'
	glVertex3f(.81,-0.48,0.7);//f
glEnd();




glBegin(GL_POLYGON);
	glVertex3f(-.42,-.2,0.7);//d
	glVertex3f(-.42,-.2,-0.7);//d'
	glVertex3f(-0.3,-.48,-0.7);//e'
	glVertex3f(-0.3,-.48,0.7);//e
glEnd();

glBegin(GL_POLYGON);

glVertex3f(-1.2,-.28,0.7);//r
glVertex3f(-1.2,-.28,-0.7);//r'
glVertex3f(-1.12,-.48,-0.7);//a'
glVertex3f(-1.12,-.48,0.7);//a

glEnd();

glBegin(GL_POLYGON);
	glVertex3f(-1.12,-.48,0.7);//a
	glVertex3f(-1.12,-.48,-0.7);//a'
	glVertex3f(-0.86,-.48,-0.7);//b'
	glVertex3f(-0.86,-.48,0.7);//b
glEnd();

glBegin(GL_POLYGON);
	glVertex3f(-0.86,-.48,0.7);//b
	glVertex3f(-0.86,-.48,-0.7);//b'
	glVertex3f(-.74,-0.2,-0.7);//c'
	glVertex3f(-.74,-0.2,0.7);//c
glEnd();

glBegin(GL_POLYGON);
	glVertex3f(-.74,-0.2,0.7);//c
	glVertex3f(-.74,-0.2,-0.7);//c'
	glVertex3f(-.42,-.2,-0.7);//d'
	glVertex3f(-.42,-.2,0.7);//d
glEnd();

glBegin(GL_POLYGON);
	glVertex3f(.81,-0.48,0.7);//f
	glVertex3f(.81,-0.48,-0.7);//f'
	glVertex3f(.94,-0.2,-0.7);//g'
	glVertex3f(.94,-0.2,0.7);//g
glEnd();

glBegin(GL_POLYGON);
	glVertex3f(.94,-0.2,0.7);//g
	glVertex3f(.94,-0.2,-0.7);//g'
	glVertex3f(1.24,-.2,-0.7);//h'
	glVertex3f(1.24,-.2,0.7);//h
glEnd();

glBegin(GL_POLYGON);
	glVertex3f(1.24,-.2,0.7);//h
	glVertex3f(1.24,-.2,-0.7);//h'
	glVertex3f(1.38,-.48,-0.7);//i'
	glVertex3f(1.38,-.48,0.7);//i
glEnd();

glBegin(GL_POLYGON);
	glVertex3f(1.38,-.48,0.7);//i
	glVertex3f(1.38,-.48,-0.7);//i'
	glVertex3f(1.52,-.44,-0.7);//j'
	glVertex3f(1.52,-.44,0.7);//j
glEnd();




//********************************************************************************************8


// door outline- rear, front
glBegin(GL_LINE_LOOP);
glColor3f(1.0,1.0,1.0);
glVertex3f(-0.5,0.22,0.7);//hh
glVertex3f(0.0,0.22,0.7);//gg
glVertex3f(0.0,-0.2,0.7);//oo
glVertex3f(-0.5,-0.2,0.7);//pp


glEnd();



// door2 outline- near, driver

glBegin(GL_LINE_LOOP);

glVertex3f(0.12,0.22,0.7);//ll
glVertex3f(0.62,0.22,0.7);//kk
glVertex3f(0.62,-0.2,0.7);//mm
glVertex3f(0.12,-0.2,0.7);//nn
glEnd();


glColor3f(0.0,0.0,0.0);
// door2  outline- far, driver

glBegin(GL_LINE_LOOP);

glVertex3f(0.12,0.22,-0.7);//ll'
glVertex3f(0.62,0.22,-0.7);//kk'
glVertex3f(0.62,-0.2,-0.7);//mm'
glVertex3f(0.12,-0.2,-0.7);//nn'
glEnd();

// door outline- rear, far
glBegin(GL_LINE_LOOP);

glVertex3f(-0.5,0.22,-0.7);//hh'
glVertex3f(0.0,0.22,-0.7);//gg'
glVertex3f(0.0,-0.2,-0.7);//oo'
glVertex3f(-0.5,-0.2,-0.7);//pp'


glEnd();
glBegin(GL_POLYGON);//front**
glVertex3f(1.52,.14,0.7);//k
glVertex3f(1.52,.14,-0.7);//k'
glVertex3f(1.52,-.44,-0.7);//j'
glVertex3f(1.52,-.44,0.7);//j

glEnd();

glColor3f(0.0,0.0,1.0);

// transparent objects are placed next ..

 glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);//TRANCPARENCY3

//windscreen
 glBegin(GL_POLYGON);
glColor4f(0.0,0.0,0.0,0.7);   //COLOR =WHITE TRANSPARENT
	glVertex3f(0.562,.5,.6);//AAA
	glVertex3f(.562,.5,-.6);//AAA'
	glVertex3f(.76,.22,-.6);//MMM'
	glVertex3f(.76,.22,.6);//MMM

glEnd();
//rear window
glBegin(GL_POLYGON);
   //COLOR =WHITE TRANSPARENT

	glVertex3f(-1.068,0.5,0.6);//pp
	glVertex3f(-1.068,0.5,-0.6);//pp'
	glVertex3f(-1.2,0.22,-0.6);//qq'
	glVertex3f(-1.2,0.22,0.6);//qq

glEnd();
//leftmost window front
glBegin(GL_POLYGON);
	glVertex3f(-0.98,0.5,0.7);//aa
	glVertex3f(-0.64,0.5,0.7);//bb
	glVertex3f(-0.64,0.22,0.7);//cc
	glVertex3f(-1.08,0.22,0.7);//dd
glEnd();

//leftmost window back
glBegin(GL_POLYGON);

	glVertex3f(-0.98,0.5,-0.7);//aa
	glVertex3f(-0.64,0.5,-0.7);//bb
	glVertex3f(-0.64,0.22,-0.7);//cc
	glVertex3f(-1.08,0.22,-0.7);//dd
glEnd();

//middle window front

glBegin(GL_POLYGON);

glVertex3f(-0.5,0.5,0.7);
glVertex3f(0.0,0.5,0.7);
glVertex3f(0.0,0.22,0.7);
glVertex3f(-0.5,0.22,0.7);

glEnd();




//middle window back

glBegin(GL_POLYGON);

glVertex3f(-0.5,0.5,-0.7);
glVertex3f(0.0,0.5,-0.7);
glVertex3f(0.0,0.22,-0.7);
glVertex3f(-0.5,0.22,-0.7);

glEnd();
//rightmost window front

glBegin(GL_POLYGON);

glVertex3f(0.12,0.5,0.7);//ii
glVertex3f(0.44,0.5,0.7);//jj
glVertex3f(0.62,0.22,0.7);//kk
glVertex3f(0.12,0.22,0.7);//ll


glEnd();


//rightmost window back

glBegin(GL_POLYGON);

glVertex3f(0.12,0.5,-0.7);//ii'
glVertex3f(0.44,0.5,-0.7);//jj'
glVertex3f(0.62,0.22,-0.7);//kk'
glVertex3f(0.12,0.22,-0.7);//ll'


glEnd();


////car code ends here
glColor3f(0.0,0.0,1.0);

}
